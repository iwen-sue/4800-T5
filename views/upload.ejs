<%- contentFor('body') %>
<link rel="stylesheet" href="/css/upload.css">
<h1 style="margin-top: 90px;">Send Content</h1>

<!-- Success and error messages -->
<div class="messages">
    <% if (successMessage) { %>
        <div class="alert success"><%= successMessage %></div>
    <% } %>
    <% if (errorMessage) { %>
        <div class="alert error"><%= errorMessage %></div>
    <% } %>
</div>


<div class="upload-container">
    <!-- Form to upload text -->
    <form action="/upload/text" method="POST">
        <textarea name="text" placeholder="Enter description" rows="5" required></textarea>
        <button type="submit">Upload Text</button>
    </form>

    <!-- Drag-and-drop or file input upload area -->
    <form action="/upload/file" method="POST" enctype="multipart/form-data" id="file-upload-form">
        <div id="drop-zone">
            <p>Drag files here or click to upload</p>
            <input type="file" name="files" id="file-input" multiple hidden>
        </div>
        <div id="file-list"></div>
        <button type="button" id="select-file-button">Select Files</button> 
        <button type="submit">Upload Files</button>
    </form>
    
    <script>
    const dropZone = document.getElementById('drop-zone');
    const fileInput = document.getElementById('file-input');
    const selectFileButton = document.getElementById('select-file-button'); // Button to trigger file input
    const fileList = document.getElementById('file-list'); // File list container
    let selectedFiles = [];
    
    // Highlight drop area on dragover
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });
    
    // Remove highlight on dragleave
    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });
    
    // Handle file drop
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
    
        const files = Array.from(e.dataTransfer.files);

       if (files.length > 0) {
            selectedFiles = [...selectedFiles, ...files];
            updateFileList(selectedFiles);
        }
    });
    
    // Handle file selection via "Select Files" button
    selectFileButton.addEventListener('click', () => {
        fileInput.click(); // Trigger file input dialog
    });
    
    // Handle file selection via file input
    fileInput.addEventListener('change', () => {
        const files = Array.from(fileInput.files);
        selectedFiles = [...selectedFiles, ...files];
        updateFileList(selectedFiles);
    });
    
    // Function to display the file names
    function updateFileList(files) {
        fileList.innerHTML = '';
        files.forEach(file => {
            const listItem = document.createElement('p');
            listItem.textContent = file.name;
            fileList.appendChild(listItem);
        });
        console.log('Selected files:', files);
    }
    </script>
    